#!/bin/python3
# -*- coding: utf-8 -*-
#
# This file is part of INGInious. See the LICENSE and the COPYRIGHTS files for
# more information about the licensing of this file.
#
# Tool to import answer from standard input to the template files given in arguments
import os
import argparse
import cychall_container_api.utils as utils

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, 
                                 description='Parse the template file and generate an output file.',
                                 epilog='Input data must have been passed through INGInious program.')
parser.add_argument('-o', '--output', help="Output executable filename", default="")
parser.add_argument('-m', '--mode', help="Mode used to switch to next user (direct, password)", default=None)
parser.add_argument('-c', '--compile', help="Custom compile command", default=None)
parser.add_argument('-e', '--exec', help="Custom executable start command", default=None)
parser.add_argument('input', help="Template filename")
args = parser.parse_args()

outfile = args.output
infile = args.input
mode = args.mode
compile = args.compile
start = args.exec

if outfile is None or outfile == "":
    outfile = os.path.splitext(infile)[0]

temp_c_file = outfile + ".c"

utils.parse_template(outfile=temp_c_file, infile=infile) # j2 to c
utils.compile_gcc(c_file=temp_c_file, outfile=outfile, command=compile) # Compile c

with open("temp.txt", "w") as temp:
    if mode is None:
        temp.write("NONE")
    else:
        temp.write(mode)

if mode is not None and mode != "custom":
    utils.add_wrapper(outfile="start", executable=outfile, wrapper_name=mode, command=start) # Add wrapper and compile