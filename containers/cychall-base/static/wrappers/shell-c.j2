{% if command %}
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <error.h>
#include <signal.h>
#include <pwd.h>
#include <grp.h>

#define DIRECTORY_SEPARATOR '/'
#define ISSLASH(C) ((C) == DIRECTORY_SEPARATOR)
#define FILE_SYSTEM_PREFIX_LEN(Filename) 0

#define DEFAULT_SHELL "/bin/sh"
#define DEFAULT_LOGIN_PATH "/usr/ucb:/bin:/usr/bin"
#define DEFAULT_ROOT_LOGIN_PATH "/usr/ucb:/bin:/usr/bin:/etc"

/* Exit statuses for programs like 'env' that exec other programs.  */
enum
{
  EXIT_TIMEDOUT = 124, /* Time expired before child completed.  */
  EXIT_CANCELED = 125, /* Internal error prior to exec attempt.  */
  EXIT_CANNOT_INVOKE = 126, /* Program located, but not usable.  */
  EXIT_ENOENT = 127 /* Could not find program to exec.  */
};

char *
last_component (char const *name)
{
  char const *base = name + FILE_SYSTEM_PREFIX_LEN (name);
  char const *p;
  bool last_was_slash = false;

  while (ISSLASH (*base))
    base++;

  for (p = base; *p; p++)
    {
      if (ISSLASH (*p))
        last_was_slash = true;
      else if (last_was_slash)
        {
          base = p;
          last_was_slash = false;
        }
    }

  return (char *) base;
}

static void
change_identity (const struct passwd *pw)
{
    if (setregid (pw->pw_gid, pw->pw_gid))
        error (EXIT_CANCELED, errno, "cannot set group id");
    if (setreuid (pw->pw_uid, pw->pw_uid))
        error (EXIT_CANCELED, errno, "cannot set user id");
}

static void
modify_environment (const struct passwd *pw, const char *shell)
{
    /* Leave TERM unchanged.  Set HOME, SHELL, USER, LOGNAME, PATH.
        Unset all other environment variables.  */
    char const *term = getenv ("TERM");
    if (term)
        term = strdup (term);
    clearenv();
    if (term)
        setenv ("TERM", term, true);
    setenv ("HOME", pw->pw_dir, true);
    setenv ("SHELL", shell, true);
    setenv ("USER", pw->pw_name, true);
    setenv ("LOGNAME", pw->pw_name, true);
    setenv ("PATH", (pw->pw_uid
                    ? DEFAULT_LOGIN_PATH
                    : DEFAULT_ROOT_LOGIN_PATH), true);
}

int
argsystem(const char *path, int argc, char *const argv[])
{
    sigset_t blockMask, origMask;
    struct sigaction saIgnore, saOrigQuit, saOrigInt, saDefault;
    pid_t childPid;
    int status, savedErrno;

    /* The parent process (the caller of system()) blocks SIGCHLD
       and ignore SIGINT and SIGQUIT while the child is executing.
       We must change the signal settings prior to forking, to avoid
       possible race conditions. This means that we must undo the
       effects of the following in the child after fork(). */

    sigemptyset(&blockMask);            /* Block SIGCHLD */
    sigaddset(&blockMask, SIGCHLD);
    sigprocmask(SIG_BLOCK, &blockMask, &origMask);

    saIgnore.sa_handler = SIG_IGN;      /* Ignore SIGINT and SIGQUIT */
    saIgnore.sa_flags = 0;
    sigemptyset(&saIgnore.sa_mask);
    sigaction(SIGINT, &saIgnore, &saOrigInt);
    sigaction(SIGQUIT, &saIgnore, &saOrigQuit);

    switch (childPid = fork()) {
    case -1: /* fork() failed */
        status = -1;
        break;          /* Carry on to reset signal attributes */

    case 0: /* Child: exec command */

        /* We ignore possible error returns because the only specified error
           is for a failed exec(), and because errors in these calls can't
           affect the caller of system() (which is a separate process) */

        saDefault.sa_handler = SIG_DFL;
        saDefault.sa_flags = 0;
        sigemptyset(&saDefault.sa_mask);

        if (saOrigInt.sa_handler != SIG_IGN)
            sigaction(SIGINT, &saDefault, NULL);
        if (saOrigQuit.sa_handler != SIG_IGN)
            sigaction(SIGQUIT, &saDefault, NULL);

        sigprocmask(SIG_SETMASK, &origMask, NULL);

        char **__argv = malloc(sizeof(char *) * (4 + argc));
        __argv[0] = "sh";
        __argv[1] = "-c";
        __argv[3 + argc] = NULL;

        size_t curCommandLen = strlen(path), commandLen = curCommandLen;
        unsigned int pow10 = 10, exp10 = 1;

        // execute command as : /bin/sh -c 'command $0 $1 ...' arg0 arg1 ...
        // so we need to compute the length of 'command $0 $1 ...'
        for (int argi = 0; argi < argc; argi ++) {
            if (argi >= pow10) {
                pow10 *= 10;
                exp10 ++;
            }
            // length of ' $<n>'
            commandLen += exp10 + 2;
        }

        __argv[2] = malloc(sizeof(char) * (commandLen + 1));
        strcpy(__argv[2], path);

        pow10 = 10, exp10 = 1;

        for (int argi = 0; argi < argc; argi ++) {
            if (argi >= pow10) {
                pow10 *= 10;
                exp10 ++;
            }
            // build the command with arguments
            snprintf(__argv[2] + curCommandLen, exp10 + 3, " $%d", argi);
            curCommandLen += exp10 + 2;

            __argv[3 + argi] = argv[argi];
        }

        // execute command as : /bin/sh -c 'command $0 $1 ...' arg0 arg1 ...
        execv("/bin/sh", __argv);
        _exit(127);                     /* We could not exec the shell */

    default: /* Parent: wait for our child to terminate */

        /* We must use waitpid() for this task; using wait() could inadvertently
           collect the status of one of the caller's other children */

        while (waitpid(childPid, &status, 0) == -1) {
            if (errno != EINTR) {       /* Error other than EINTR */
                status = -1;
                break;                  /* So exit loop */
            }
        }
        break;
    }

    /* Unblock SIGCHLD, restore dispositions of SIGINT and SIGQUIT */

    savedErrno = errno;                 /* The following may change 'errno' */

    sigprocmask(SIG_SETMASK, &origMask, NULL);
    sigaction(SIGINT, &saOrigInt, NULL);
    sigaction(SIGQUIT, &saOrigQuit, NULL);

    errno = savedErrno;

    return status;
}

static void
run_shell (char const *shell)
{
    char *arg0;
    char *shell_basename;

    char *args[2];
    shell_basename = last_component (shell);
    arg0 = malloc (strlen (shell_basename) + 2);
    arg0[0] = '-';

    strcpy (arg0 + 1, shell_basename);
    args[0] = arg0;
    args[1] = NULL;

    execv (shell, args);

    {
        int exit_status = (errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE);
        error (0, errno, "%s", shell);
        exit (exit_status);
    }
}

int
main(int argc, char ** const argv) {
    int status = -1;
    int ret = 1;
    char *shell = getenv ("SHELL");
    uid_t next_uid = geteuid();
    struct passwd pw_copy; 
    struct passwd *pw = getpwuid(next_uid);

    if (! (pw && pw->pw_name && pw->pw_name[0] && pw->pw_dir && pw->pw_dir[0]
         && pw->pw_passwd))
        error (EXIT_CANCELED, 0, "user with uid %d does not exist", next_uid);

    /* Make a copy of the password information and point pw at the local
        copy instead.  Otherwise, some systems (e.g. GNU/Linux) would clobber
        the static data through the getlogin call from log_su.
        Also, make sure pw->pw_shell is a nonempty string.
        It may be NULL when NEW_USER is a username that is retrieved via NIS (YP),
        but that doesn't have a default shell listed.  */
    pw_copy = *pw;
    pw = &pw_copy;
    pw->pw_name = strdup (pw->pw_name);
    pw->pw_passwd = strdup (pw->pw_passwd);
    pw->pw_dir = strdup (pw->pw_dir);
    pw->pw_shell = strdup (pw->pw_shell && pw->pw_shell[0]
                            ? pw->pw_shell
                            : DEFAULT_SHELL);

    endpwent();

    shell = strdup (shell ? shell : pw->pw_shell);
    modify_environment (pw, shell);

    change_identity(pw);

    status = argsystem("{{ command }}", argc - 1, argc == 1 ? NULL : argv + 1);
    ret = status != -1;

    if (ret) {
        if (WIFEXITED(status)) {
            ret = WEXITSTATUS(status);

            if(!ret) {
                printf("\nStep finished: switching to next user!\n");

                if (chdir (pw->pw_dir) != 0)
                    error (0, errno, "warning: cannot change directory to %s", pw->pw_dir);

                if (ferror (stderr))
                    exit (EXIT_CANCELED);

                run_shell(shell);
            }
            else{
                printf("\nFailed to exploit the challenge. Returned code: %d\n", ret);
            }
        }
        else{
            printf("\nThe challenge ended unexpectedly (may be by a signal).\n");
        }
    }

    return ret;
}
{% endif %}